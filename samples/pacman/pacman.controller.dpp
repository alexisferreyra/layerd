using js;
using js::global;

namespace game
{    
    class Controller
    {
        HTMLCanvas^ _canvas;
        HTMLCanvasContext^ _context;
        PacmanSoul^ _pacman;
        PacmanSoul^ _badPacman;
        
    public:
        static int Main()
        {
            new game::Controller().run();
            console::log("HTML5 Pacman Started!");
        }
        void run()
        {
            this.renderBody();
            Map^ map = new game::Map(this._context, this._canvas.width, this._canvas.height);
            map.render();
            this._pacman = new game::BadPacman(map, 1, 1, "blue");
            this._pacman.render();
            this._badPacman = new game::BadPacman(map, map.rows() - 2, map.columns() - 2, "red");
            this._badPacman.render();
            this._pacman.setOtherPacman(this._badPacman);
            this._badPacman.setOtherPacman(this._pacman);
            
            // render timer
            global::window.setInterval(Func{
                map.renderAround(this._pacman.row(), this._pacman.column());
                map.renderAround(this._badPacman.row(), this._badPacman.column());
                
                this._pacman.updateAnimation();
                this._pacman.render();
                this._badPacman.updateAnimation();
                this._badPacman.render();
            }, 1000 / 60);
            
            global::window.onkeyup = Func(event is DOMEvent^){
                // up
                if(event.keyCode == 38)
                {
                    this._pacman.changeDirection(Actor::Up);
                    event.preventDefault();
                }
                // down
                if(event.keyCode == 40)
                {
                    this._pacman.changeDirection(Actor::Down);
                    event.preventDefault();
                }
                // left
                if(event.keyCode == 37)
                {
                    this._pacman.changeDirection(Actor::Left);
                    event.preventDefault();
                }
                // right
                if(event.keyCode == 39)
                {
                    this._pacman.changeDirection(Actor::Right);
                    event.preventDefault();
                }
            };
        }
        void renderBody()
        {
            this._canvas = (HTMLCanvas^)global::document.createElement("canvas");
            this._canvas.width = global::window.innerWidth;
            this._canvas.height = global::window.innerHeight;
            
            this._context = this._canvas.getContext("2d");
            HTMLElement^ mainDiv = global::document.getElementById("main-page");
            mainDiv.appendChild(this._canvas);
            
            this._context.setFillColor("#000");
            this._context.fillRect(0 , 0, this._canvas.width, this._canvas.height);
        }
    }
}
