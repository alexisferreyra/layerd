import "classy.js", "platform=Javascript", "type=script";
using js;

namespace js
{
	extern public class global
	{
	public:
		extern public class console
		{
		public:
			static void log(params object*ref[] args);
		}
	}

	
}

namespace T
{
	enum E1
	{
		V1,
		V2 = 4,
		V3
	}

	interface Namer 
	{
		string^ GetName();
		void SetName(string^ newName);
	}

	// this a class 
	class C3 inherits C2
	{
	public:
		C3()
		{
			js::global::console::log("C3 constructor");
		}
		override string^ GetName()
		{
			// say something
			return "C3 Says " + base.GetName();
		}
	}

	class C1 implements Namer
	{
	protected:
		string^ _name;
	public:
		C1()
		{
			global::console::log("C1 constructor");
		}
		/*
		C1(string^ arg1)
		{
			global::console::log("C1 constructor 2");
			this._name = arg1;
		}
		*/
		static int Main(string^[] args)
		{
			E1 var1 = E1::V3;

			C3^ obj3 = new T::C3();

			C1^ obj1 = new T::C1();
			obj1.SetName("Alexis");
			C2^ obj2 = new T::C2();
			obj2.SetName("Adriel");
			obj3.SetName("Ferreyra");
			obj3.SetNewName("Ferreyra2");
			obj3.fooBase();

			global::console::log("C1 Says: " + obj1.GetName());
			global::console::log("C2 Says: " + obj2.GetName());
			global::console::log("C2 Says: " + obj2.GetNameFromField());
			global::console::log("C3 Says: " + obj3.GetName());
			global::console::log("C3 name from base: " + obj3.GetNameFromBaseField());
		}
		void fooBase()
		{
			js::global::console::log("C1.fooBase");
		}

		void foo()
		{
			int n = 10;
			// test try-catch-finally
			try
			{
				n = n / 0;
			}
			catch(object^ error)
			{
				n = 2;
				throw error;
			}
			finally
			{
				n = 0;
			}
			// test switch
			switch(n)
			{
			case 0:
				n++;
				break;
			case 1:
				n += 2;
				break;
			default:
				n += 3;
				break;
			}
			// bye
		}

		virtual string^ GetName()
		{
			return this._name;
		}
		virtual void SetName(string^ newName)
		{
			this._name = newName;
		}
	}

	class C2 inherits C1
	{
	public:
		C2()
		{
			js::global::console::log("C2 constructor");
		}
		override string^ GetName()
		{
			return "Hi " + base.GetName();
		}
		override void SetName(string^ newName)
		{
			base.SetName(newName + " Hohoho");
		}
		void SetNewName(string^ newName)
		{
			base.SetName(newName);
		}
		string^ GetNameFromField()
		{
			return this._name;
		}
		string^ GetNameFromBaseField()
		{
			return base._name + " and " + base.GetName();
		}
	}

	class EventType{
    public:
        static const int Touches = 0;
        static const int Motion = 1;
        static const int RemoteControl = 2;

        extern static int operator implicit(T::EventType arg1);
        extern static T::EventType operator implicit(int arg1);
    }

	public extern class Global
	{
	}

    public extension class Global
    {
    public:	
        static bool THROW_IF_NOT_IMPLEMENTED = true;
        static int NotFound = -1;
		static int RAND_MAX = 4294967296;
	}

	class Point 
	{
	public:
        Point(double x, double y)
        {
			this.x = x;
			this.y = y;				
		}
			
        static T::Point FixedPoint() 
        {
            return T::Point(10, 10);
        }

		double x;
		double y;
	}

}
