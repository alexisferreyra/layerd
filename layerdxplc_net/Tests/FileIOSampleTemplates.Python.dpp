using DotNET::System;
using DotNET::System::Collections;
using DotNET::LayerD::CodeDOM;
using DotNET::LayerD::ZOECompiler;

namespace LayerD::IO{

	// Provides encapsulation for general exceptions
	public factory class UniversalException{
	public:
		type UniversalException(){
			return ZoeHelper::MakeTypeFromString("py.Exception");
		}
		exp string^ GetMessage(){
			return writecode(py::global::str(ileft));
		}
	}

	// Provides encapsulation for basic consule input/output
	public factory class Console {
		Console(){
			// You can't create instances
		}
	public:
		static exp void Write(exp void toWrite){
			return writecode(py::global::print($toWrite));
		}
		static exp void WriteLine(exp void toWrite){
			return writecode(py::global::print($toWrite));
		}
		static exp void WriteLine(){
			return writecode(py::global::print(""));
		}
	}

	// Provides encapsulation for reading text files
	public factory class FileReader {
	public:
		type FileReader(){
			if(context.CurrentStatement.IsA(CodeDOMTypes::XplDeclaratorlist))
			{
				context.CurrentStatement.get_Parent().Children().InsertAfter(
					writecode{ char[] _lastRead = null; }.Children(), context.CurrentStatement);
			}
			return ZoeHelper::MakeTypeFromString("py.os.File");
		}
		exp void FileReader(exp string^ fileName){
			return writecode( py::global::open( $fileName, "rb") );
		}
		exp int Read(exp char[] buffer){
			return writecode( $buffer = _lastRead = ileft.read( py::global::len(buffer) ) );
		}
		exp bool Eof(){
			return writecode( (py::global::str(_lastRead) == "") );
		}
		exp void Close(){
			return writecode( ileft.close() );
		}
	}

	// Provides encapsulation for writing text files
	public factory class FileWriter {
	public:
		type FileWriter(){
			return ZoeHelper::MakeTypeFromString("py.os.File");
		}
		exp void FileWriter(exp string^ fileName){
			return writecode( py::global::open($fileName, "w") );
		}
		exp int Write(exp string^ buffer){
			return writecode( ileft.write($buffer) );
		}
		exp void Close(){
			return writecode( ileft.close() );
		}
	}

}