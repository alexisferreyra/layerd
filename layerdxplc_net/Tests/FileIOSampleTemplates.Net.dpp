using DotNET::System;
using DotNET::System::Collections;
using DotNET::LayerD::CodeDOM;
using DotNET::LayerD::ZOECompiler;

namespace LayerD::IO{

	// Provides encapsulation for general exceptions
	public factory class UniversalException{
	public:
		type UniversalException(){
			return ZoeHelper::MakeTypeFromString("DotNET.System.Exception");
		}
		exp string^ GetMessage(){
			return writecode(ileft.Message);
		}
	}

	// Provides encapsulation for basic consule input/output
	public factory class Console {
		Console(){
			// You can't create instances
		}
	public:
		static exp void Write(exp void toWrite){
			return writecode(DotNET::System::Console::Write($toWrite));
		}
		static exp void WriteLine(exp void toWrite){
			return writecode(DotNET::System::Console::WriteLine($toWrite));
		}
		static exp void WriteLine(){
			return writecode(DotNET::System::Console::WriteLine());
		}
	}

	// Provides encapsulation for reading text files
	public factory class FileReader {
	public:
		type FileReader(){
			return ZoeHelper::MakeTypeFromString("DotNET.System.IO.StreamReader");
		}
		exp void FileReader(exp string^ fileName){
			return writecode(new DotNET::System::IO::StreamReader($fileName));
		}
		exp int Read(exp char[] buffer){
			return writecode(ileft.Read($buffer, 0, (int)$buffer.Length));
		}
		exp bool Eof(){
			return writecode(ileft.EndOfStream);
		}
		exp void Close(){
			return writecode(ileft.Close());
		}
	}

	// Provides encapsulation for writing text files
	public factory class FileWriter {
	public:
		type FileWriter(){
			return ZoeHelper::MakeTypeFromString("DotNET.System.IO.StreamWriter");
		}
		exp void FileWriter(exp string^ fileName){
			return writecode(new DotNET::System::IO::StreamWriter($fileName));
		}
		exp int Write(exp string^ buffer){
			return writecode(ileft.Write($buffer));
		}
		exp void Close(){
			return writecode(ileft.Close());
		}
	}

}