import "Microsoft", "platform=DotNET", "ns=DotNET", "assembly=mscorlib";
import "System", "platform=DotNET", "ns=DotNET", "assembly=mscorlib";
using DotNET::System;
using DotNET::System::IO;
using DotNET::System::Collections;
using DotNET::LayerD::ZOECompiler;
using DotNET::LayerD::CodeDOM;

namespace Zoe::Structures{
	public factory class Placeholders{
		static Hashtable^ placeholders = new Hashtable();
		static Hashtable^ placeholdersContentBackup = new Hashtable();
	public:
		// Create a New Placeholder Name on current compiling program
		// If the Placeholder name exists an error will be generated
		static exp void New(iname void placeholderName){
			if(placeholders.ContainsKey(placeholderName.Identifier)){
				Error^ error = new Error("A placeholder with \"" + placeholderName.Identifier + "\" name already exists.", context);
				error.set_PersistentError(true);
				compiler.Errors.AddError(error);
				return null;
			}
			placeholders.Add(placeholderName.Identifier, new ArrayList());
			placeholdersContentBackup.Add(placeholderName.Identifier, new ArrayList());
			return null;
		}
		// Set a New Placeholder for an existing Name
		// If the placeholder was not previously delcared with New a error will occour
		static exp void Set(iname void placeholderName){
			if(!placeholders.ContainsKey(placeholderName.Identifier)){
				Error^ error = new Error("A placeholder with \"" + placeholderName.Identifier + "\" does not exists, firt use New to declare a Placeholder.", context);
				error.set_PersistentError(true);
				compiler.Errors.AddError(error);
				return null;
			}
			ArrayList^ placeholderList = (ArrayList^)placeholders[placeholderName.Identifier];
			placeholderList.Add(context.get_Parent());
			ArrayList^ placeholderContentBackupList = (ArrayList^)placeholdersContentBackup[placeholderName.Identifier];
			if(placeholderContentBackupList.Count!=0){
				XplNode^ insertPoint = context.get_Parent();
				foreach(XplNode^ attachData in placeholderContentBackupList){
					insertPoint.get_Parent().Children().InsertBefore( attachData.Clone(), insertPoint );
				}
			}
			return null;
		}
		// Attach a node to an existing Placeholder
		// If the placeholder was not previously delcared with New a error will occour
		static exp void Attach(iname void placeholderName, block attachData){
			return AttachNode(placeholderName, attachData);
		}
		// Attach a node to an existing Placeholder
		// If the placeholder was not previously delcared with New a error will occour
		static exp void AttachNode(iname void placeholderName, XplNode^ attachData){
			if(!placeholders.ContainsKey(placeholderName.Identifier)){
				Error^ error = new Error("A placeholder with \"" + placeholderName.Identifier + "\" does not exists, firt use New to declare a Placeholder.", context);
				error.set_PersistentError(true);
				compiler.Errors.AddError(error);
				return null;
			}
			ArrayList^ placeholderList = (ArrayList^)placeholders[placeholderName.Identifier];
			if(placeholderList.Count==0){
				Error^ error = new Error("The placeholder with \"" + placeholderName.Identifier + "\" does not have insert points, firt use Attach to declare a insert points.", context);
				error.set_PersistentError(true);
				compiler.Errors.AddError(error);
				return null;
			}
			// Add data to placeholder content backup
			((ArrayList^)placeholdersContentBackup[placeholderName.Identifier]).Add(attachData.Clone());
			// Itearte on insertpoints and insert the content
			foreach(XplNode^ insertPoint in placeholderList){
				insertPoint.get_Parent().Children().InsertBefore( attachData.Clone(), insertPoint );
			}
			return null;
		}

		// Debug purpose
		static XplNode^ Return(block data){
			return data;
		}

	}
}

