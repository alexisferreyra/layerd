using DotNET::System;
using DotNET::System::Collections;
using DotNET::LayerD::CodeDOM;
using DotNET::LayerD::ZOECompiler;

namespace LayerD::IO{

	// Provides encapsulation for general exceptions
	// Compatible with .NET and Java
	public factory class UniversalException{
	public:
		type UniversalException(){
			if(compiler.get_OutputPlatform().Contains("DotNET")){
				return ZoeHelper::MakeTypeFromString("DotNET.System.Exception");
			}
			else{
				return ZoeHelper::MakeTypeFromString("Java.java.lang.Exception");
			}
		}
		exp string^ GetMessage(){
			if(compiler.get_OutputPlatform().Contains("DotNET")){
				return writecode(ileft.Message);
			}
			else{
				return writecode(ileft.getMessage());
			}
		}
	}

	// Provides encapsulation for basic consule input/output
	// Compatible with .NET and Java
	public factory class Console {
		Console(){
			// You can't create instances
		}
	public:
		static exp void Write(exp void toWrite){
			if(compiler.get_OutputPlatform().Contains("DotNET")){
				return writecode(DotNET::System::Console::Write($toWrite));
			}
			else{
				return writecode(Java::java::lang::System::@out.print($toWrite));
			}
		}
		static exp void WriteLine(exp void toWrite){
			if(compiler.get_OutputPlatform().Contains("DotNET")){
				return writecode(DotNET::System::Console::WriteLine($toWrite));
			}
			else{
				return writecode(Java::java::lang::System::@out.println($toWrite));
			}
		}
		static exp void WriteLine(){
			if(compiler.get_OutputPlatform().Contains("DotNET")){
				return writecode(DotNET::System::Console::WriteLine());
			}
			else{
				return writecode(Java::java::lang::System::@out.println());
			}
		}
	}

	// Provides encapsulation for reading text files
	// Compatible with .NET and Java
	public factory class FileReader {
	public:
		type FileReader(){
			if(compiler.get_OutputPlatform().Contains("DotNET")){
				return ZoeHelper::MakeTypeFromString("DotNET.System.IO.StreamReader");
			}
			else{
				return ZoeHelper::MakeTypeFromString("Java.java.io.FileReader");
			}
		}
		exp void FileReader(exp string^ fileName){
			if(compiler.get_OutputPlatform().Contains("DotNET")){
				return writecode(new DotNET::System::IO::StreamReader($fileName));
			}
			else{
				return writecode(new Java::java::io::FileReader($fileName));
			}
		}
		exp int Read(exp char[] buffer){
			if(compiler.get_OutputPlatform().Contains("DotNET")){
				return writecode(ileft.Read($buffer, 0, (int)$buffer.Length));
			}
			else{
				return writecode(ileft.read($buffer));
			}			
		}
		exp bool Eof(){
			if(compiler.get_OutputPlatform().Contains("DotNET")){
				return writecode(ileft.EndOfStream);
			}
			else{
				return writecode(!ileft.ready());
			}			
		}
		exp void Close(){
			if(compiler.get_OutputPlatform().Contains("DotNET")){
				return writecode(ileft.Close());
			}
			else{
				return writecode(ileft.close());
			}
		}
	}

	// Provides encapsulation for writing text files
	// Compatible with .NET and Java
	public factory class FileWriter {
	public:
		type FileWriter(){
			if(compiler.get_OutputPlatform().Contains("DotNET")){
				return ZoeHelper::MakeTypeFromString("DotNET.System.IO.StreamWriter");
			}
			else{
				return ZoeHelper::MakeTypeFromString("Java.java.io.FileWriter");
			}
		}
		exp void FileWriter(exp string^ fileName){
			if(compiler.get_OutputPlatform().Contains("DotNET")){
				return writecode(new DotNET::System::IO::StreamWriter($fileName));
			}
			else{
				return writecode(new Java::java::io::FileWriter($fileName));
			}
		}
		exp int Write(exp string^ buffer){
			if(compiler.get_OutputPlatform().Contains("DotNET")){
				return writecode(ileft.Write($buffer));
			}
			else{
				return writecode(ileft.write($buffer));
			}			
		}
		exp void Close(){
			if(compiler.get_OutputPlatform().Contains("DotNET")){
				return writecode(ileft.Close());
			}
			else{
				return writecode(ileft.close());
			}			
		}
	}

}